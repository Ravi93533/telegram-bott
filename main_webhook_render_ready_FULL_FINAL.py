# -*- coding: utf-8 -*-
from telegram import (
    Update, BotCommand, BotCommandScopeAllPrivateChats, ChatPermissions,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ChatMemberHandler, ContextTypes, filters
)
import threading
import os
import re
import logging
from collections import defaultdict
from datetime import datetime, timedelta, timezone
from flask import Flask

# ------------ Helper: admin invite link with rights ------------
def admin_add_link(bot_username: str) -> str:
    rights = [
        'delete_messages', 'restrict_members', 'invite_users',
        'pin_messages', 'manage_topics', 'manage_video_chats', 'manage_chat'
    ]
    return f"https://t.me/{bot_username}?startgroup&admin={'+'.join(rights)}"

# ------------ Tiny keep-alive web server (for Render/railway) ------------
app_flask = Flask(__name__)

@app_flask.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def _run_web():
    app_flask.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))

def start_web():
    threading.Thread(target=_run_web, daemon=True).start()

# ------------ Config ------------
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
log = logging.getLogger(__name__)

TOKEN = os.getenv("TOKEN") or "YOUR_TOKEN_HERE"

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: ID/username (–∫—Ç–æ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è)
WHITELIST = {165553982, "Yunus1995"}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TUN_REJIMI = False              # –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
KANAL_USERNAME = None           # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä @mychannel
MAJBUR_LIMIT = 0                # 0 = –≤—ã–∫–ª, –∏–Ω–∞—á–µ 3..25
FOYDALANUVCHI_HISOBI = defaultdict(int)   # uid -> —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏–ª
RUXSAT_USER_IDS = set()         # uid —Å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
BLOK_VAQTLARI = {}              # (chat_id, user_id) -> until_datetime (UTC)

# –ü–æ–ª–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã)
FULL_PERMS = ChatPermissions(
    can_send_messages=True,
    can_send_audios=True,
    can_send_documents=True,
    can_send_photos=True,
    can_send_videos=True,
    can_send_video_notes=True,
    can_send_voice_notes=True,
    can_send_polls=True,
    can_send_other_messages=True,
    can_add_web_page_previews=True,
    can_invite_users=True,
)

# –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ (3 –º–∏–Ω—É—Ç—ã): –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–∏—Å–∞—Ç—å, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ –º–∏–Ω–∏–º—É–º—É
BLOCK_PERMS = ChatPermissions(
    can_send_messages=False,
    can_send_audios=False,
    can_send_documents=False,
    can_send_photos=False,
    can_send_videos=False,
    can_send_video_notes=False,
    can_send_voice_notes=False,
    can_send_polls=False,
    can_send_other_messages=False,
    can_add_web_page_previews=False,
    can_invite_users=True,
)

# (–°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π) —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –±–æ–ª—å—à–æ–π —Å–ª–æ–≤–∞—Ä—å
UYATLI_SOZLAR = {
    "–±–ª—è", "–±–ª—è–¥—å", "—Å—É–∫–∞", "–µ–±–∞—Ç—å", "–µ–±–∞–Ω—ã–π", "—ë–±–∞–Ω—ã–π", "—Ö—É–π", "–ø–∏–∑–¥–∞", "–¥–æ–ª–±–æ—ë–±",
    "—Ö—É–µ—Å–æ—Å", "–º—Ä–∞–∑—å", "–≥–æ–≤–Ω–æ", "–ø–∏–¥–∞—Ä–∞—Å", "–ø–∏–¥–æ—Ä", "—Å—Å–∞–Ω–∏–Ω–∞", "—Ö–µ—Ä–Ω—è"
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞/–¥–æ–º–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π/inline-—Ä–µ–∫–ª–∞–º—ã
SUSPECT_KEYWORDS = {"open game", "play", "–∏–≥—Ä–∞—Ç—å", "–æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", "game", "cattea", "gamee", "hamster", "notcoin", "tap to earn", "earn", "clicker"}
SUSPECT_DOMAINS = {"cattea", "gamee", "hamster", "notcoin", "tgme", "t.me/gamee", "textra.fun", "ton"}

# ------------ Helpers ------------
async def is_admin(update: Update) -> bool:
    chat = update.effective_chat
    user = update.effective_user
    if not (chat and user):
        return False
    try:
        member = await update.get_bot().get_chat_member(chat.id, user.id)
        return member.status in ("administrator", "creator")
    except Exception as e:
        log.warning(f"is_admin error: {e}")
        return False

async def is_privileged_message(msg, bot) -> bool:
    """–†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤, —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã (sender_chat)."""
    try:
        chat = msg.chat
        user = msg.from_user
        if getattr(msg, "sender_chat", None) and msg.sender_chat.id == chat.id:
            return True
        if user:
            member = await bot.get_chat_member(chat.id, user.id)
            if member.status in ("administrator", "creator"):
                return True
    except Exception as e:
        log.warning(f"is_privileged_message error: {e}")
    return False

async def kanal_tekshir(user_id: int, bot) -> bool:
    global KANAL_USERNAME
    if not KANAL_USERNAME:
        return True
    try:
        member = await bot.get_chat_member(KANAL_USERNAME, user_id)
        return member.status in ("member", "creator", "administrator")
    except Exception as e:
        log.warning(f"kanal_tekshir error: {e}")
        return False

def matndan_sozlar_olish(matn: str):
    return re.findall(r"\b\w+\b", (matn or "").lower())

def add_to_group_kb(bot_username: str):
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=admin_add_link(bot_username))]]
    )

def has_suspicious_buttons(msg) -> bool:
    try:
        kb = msg.reply_markup.inline_keyboard if msg.reply_markup else []
        for row in kb:
            for btn in row:
                if getattr(btn, "callback_game", None) is not None:
                    return True
                u = getattr(btn, "url", "") or ""
                if u:
                    low = u.lower()
                    if any(dom in low for dom in SUSPECT_DOMAINS) or any(x in low for x in ("game", "play", "tgme")):
                        return True
                wa = getattr(btn, "web_app", None)
                if wa and getattr(wa, "url", None):
                    if any(dom in wa.url.lower() for dom in SUSPECT_DOMAINS):
                        return True
        return False
    except Exception:
        return False

# ------------ Commands ------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=admin_add_link(context.bot.username))]]
    await update.effective_message.reply_text(
        "<b>–ü–†–ò–í–ï–¢üëã</b>\n"
        "–Ø <b>—É–¥–∞–ª—è—é</b> –∏–∑ –≥—Ä—É–ø–ø –ª—é–±—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã, —Å—Å—ã–ª–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ –∏ —Ä–µ–∫–ª–∞–º—É –æ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤.\n\n"
        "–ú–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à <b>ID</b> –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
        "–°–¥–µ–ª–∞—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–∏–Ω–∞—á–µ –ø–∏—Å–∞—Ç—å –Ω–µ–ª—å–∑—è) ‚ûï\n\n"
        "–£–¥–∞–ª—è—é 18+ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –¥–µ–ª–∞—é –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ üë®üèª‚Äç‚úà\n\n"
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º üëâ /help\n\n"
        "–ß—Ç–æ–±—ã —è —Ä–∞–±–æ—Ç–∞–ª, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –¥–∞–π—Ç–µ <b>–ü–†–ê–í–ê –ê–î–ú–ò–ù–ê</b> üôÇ\n\n"
        "–î–ª—è —Å–≤—è–∑–∏üëâ @Devona0107",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìå <b>–°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î</b>\n\n"
        "üîπ <b>/id</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID.\n"
        "üîπ <b>/night</b> ‚Äî –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º (–≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è).\n"
        "üîπ <b>/nightoff</b> ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º.\n"
        "üîπ <b>/permit</b> ‚Äî –í—ã–¥–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –ø–æ reply.\n"
        "üîπ <b>/channel @username</b> ‚Äî –í–∫–ª—é—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.\n"
        "üîπ <b>/channeloff</b> ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.\n"
        "üîπ <b>/forced [3‚Äì25]</b> ‚Äî –í–∫–ª—é—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø—É.\n"
        "üîπ <b>/forcedoff</b> ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.\n"
        "üîπ <b>/top</b> ‚Äî –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º.\n"
        "üîπ <b>/cleangroup</b> ‚Äî –û–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "üîπ <b>/count</b> ‚Äî –°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –¥–æ–±–∞–≤–∏–ª–∏ –≤—ã.\n"
        "üîπ <b>/replycount</b> ‚Äî –ü–æ reply: —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏–ª —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
        "üîπ <b>/cleanuser</b> ‚Äî –ü–æ reply: –æ–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
    )
    await update.effective_message.reply_text(text, parse_mode="HTML", disable_web_page_preview=True)

async def id_berish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    user = update.effective_user
    await update.effective_message.reply_text(f"üÜî {user.first_name}, –≤–∞—à Telegram ID: {user.id}")

async def tun(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TUN_REJIMI
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    TUN_REJIMI = True
    await update.effective_message.reply_text("üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –°–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è.")

async def tunoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TUN_REJIMI
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    TUN_REJIMI = False
    await update.effective_message.reply_text("üåû –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.")

async def ruxsat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    if not update.effective_message.reply_to_message:
        return await update.effective_message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ (reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    uid = update.effective_message.reply_to_message.from_user.id
    RUXSAT_USER_IDS.add(uid)
    await update.effective_message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code> –≤—ã–¥–∞–Ω–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è.", parse_mode="HTML")

async def kanal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    global KANAL_USERNAME
    if context.args:
        KANAL_USERNAME = context.args[0]
        await update.effective_message.reply_text(f"üì¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: {KANAL_USERNAME}")
    else:
        await update.effective_message.reply_text("–ü—Ä–∏–º–µ—Ä: /channel @username")

async def kanaloff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    global KANAL_USERNAME
    KANAL_USERNAME = None
    await update.effective_message.reply_text("üö´ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

def majbur_klaviatura():
    rows = [[3, 5, 7, 10, 12], [15, 18, 20, 25]]
    keyboard = [[InlineKeyboardButton(str(n), callback_data=f"set_limit:{n}") for n in row] for row in rows]
    keyboard.append([InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ò–¢–¨ ‚ùå", callback_data="set_limit:cancel")])
    return InlineKeyboardMarkup(keyboard)

async def majbur(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    global MAJBUR_LIMIT
    if context.args:
        try:
            val = int(context.args[0])
            if not (3 <= val <= 25):
                raise ValueError
            MAJBUR_LIMIT = val
            await update.effective_message.reply_text(
                f"‚úÖ –õ–∏–º–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: <b>{MAJBUR_LIMIT}</b>",
                parse_mode="HTML"
            )
        except ValueError:
            await update.effective_message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: <b>3‚Äì25</b>. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/forced 10</code>",
                parse_mode="HTML"
            )
    else:
        await update.effective_message.reply_text(
            "üë• –°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É? üëá\n"
            "–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî /forcedoff",
            reply_markup=majbur_klaviatura()
        )

async def on_set_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.callback_query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", show_alert=True)
    q = update.callback_query
    await q.answer()
    data = q.data.split(":", 1)[1]
    global MAJBUR_LIMIT
    if data == "cancel":
        return await q.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    try:
        val = int(data)
        if not (3 <= val <= 25):
            raise ValueError
        MAJBUR_LIMIT = val
        await q.edit_message_text(f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{MAJBUR_LIMIT}</b>", parse_mode="HTML")
    except Exception:
        await q.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

async def majburoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    global MAJBUR_LIMIT
    MAJBUR_LIMIT = 0
    await update.effective_message.reply_text("üö´ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

async def top_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    if not FOYDALANUVCHI_HISOBI:
        return await update.effective_message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª.")
    items = sorted(FOYDALANUVCHI_HISOBI.items(), key=lambda x: x[1], reverse=True)[:100]
    lines = ["üèÜ <b>–¢–û–ü –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö</b> (TOP 100):"]
    for i, (uid, cnt) in enumerate(items, start=1):
        lines.append(f"{i}. <code>{uid}</code> ‚Äî {cnt} —á–µ–ª.")
    await update.effective_message.reply_text("\n".join(lines), parse_mode="HTML")

async def cleangroup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    FOYDALANUVCHI_HISOBI.clear()
    RUXSAT_USER_IDS.clear()
    await update.effective_message.reply_text("üóë –í—Å–µ —Å—á—ë—Ç—á–∏–∫–∏ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

async def count_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    cnt = FOYDALANUVCHI_HISOBI.get(uid, 0)
    if MAJBUR_LIMIT > 0:
        qoldi = max(MAJBUR_LIMIT - cnt, 0)
        await update.effective_message.reply_text(f"üìä –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {cnt} —á–µ–ª. –û—Å—Ç–∞–ª–æ—Å—å: {qoldi}.")
    else:
        await update.effective_message.reply_text(f"üìä –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {cnt} —á–µ–ª. (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ)")

async def replycount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    msg = update.effective_message
    if not msg.reply_to_message:
        return await msg.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    uid = msg.reply_to_message.from_user.id
    cnt = FOYDALANUVCHI_HISOBI.get(uid, 0)
    await msg.reply_text(f"üë§ <code>{uid}</code> –ø—Ä–∏–≥–ª–∞—Å–∏–ª(–∞) {cnt} —á–µ–ª.", parse_mode="HTML")

async def cleanuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return await update.effective_message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    msg = update.effective_message
    if not msg.reply_to_message:
        return await msg.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å.")
    uid = msg.reply_to_message.from_user.id
    FOYDALANUVCHI_HISOBI[uid] = 0
    RUXSAT_USER_IDS.discard(uid)
    await msg.reply_text(f"üóë –°—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{uid}</code> –æ–±–Ω—É–ª—ë–Ω (–ø—Ä–∏–≤–∏–ª–µ–≥–∏—è —Å–Ω—è—Ç–∞).", parse_mode="HTML")

async def kanal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_id = q.from_user.id
    if not KANAL_USERNAME:
        return await q.edit_message_text("‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    try:
        member = await context.bot.get_chat_member(KANAL_USERNAME, user_id)
        if member.status in ("member", "administrator", "creator"):
            try:
                await context.bot.restrict_chat_member(
                    chat_id=q.message.chat.id,
                    user_id=user_id,
                    permissions=FULL_PERMS,
                )
            except Exception:
                pass
            await q.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ.")
        else:
            await q.edit_message_text("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
    except Exception:
        await q.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞.")

async def on_check_added(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    data = q.data
    if ":" in data:
        try:
            owner_id = int(data.split(":", 1)[1])
        except ValueError:
            owner_id = None
        if owner_id and owner_id != uid:
            return await q.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
    cnt = FOYDALANUVCHI_HISOBI.get(uid, 0)
    if uid in RUXSAT_USER_IDS or (MAJBUR_LIMIT > 0 and cnt >= MAJBUR_LIMIT):
        try:
            await context.bot.restrict_chat_member(
                chat_id=q.message.chat.id,
                user_id=uid,
                permissions=FULL_PERMS,
            )
        except Exception:
            pass
        BLOK_VAQTLARI.pop((q.message.chat.id, uid), None)
        await q.edit_message_text("‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ.")
    else:
        qoldi = max(MAJBUR_LIMIT - cnt, 0)
        await q.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π. –û—Å—Ç–∞–ª–æ—Å—å: {qoldi}.")

async def on_grant_priv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    chat = q.message.chat if q.message else None
    user = q.from_user
    if not (chat and user):
        return await q.answer()
    try:
        member = await context.bot.get_chat_member(chat.id, user.id)
        if member.status not in ("administrator", "creator"):
            return await q.answer("–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", show_alert=True)
    except Exception:
        return await q.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.", show_alert=True)
    await q.answer()
    try:
        target_id = int(q.data.split(":", 1)[1])
    except Exception:
        return await q.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    RUXSAT_USER_IDS.add(target_id)
    await q.edit_message_text(f"üéü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{target_id}</code> –≤—ã–¥–∞–Ω–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è. –¢–µ–ø–µ—Ä—å –æ–Ω(–∞) –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å.", parse_mode="HTML")

# ------------ Filters ------------
async def reklama_va_soz_filtri(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg or not msg.chat or not msg.from_user:
        return
    if await is_privileged_message(msg, context.bot):
        return
    if msg.from_user.id in WHITELIST or (msg.from_user.username and msg.from_user.username in WHITELIST):
        return
    if TUN_REJIMI:
        try:
            await msg.delete()
        except:
            pass
        return
    if not await kanal_tekshir(msg.from_user.id, context.bot):
        try:
            await msg.delete()
        except:
            pass
        kb = [
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–∞—Å—å)", callback_data="kanal_azo")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=admin_add_link(context.bot.username))]
        ]
        await context.bot.send_message(
            chat_id=msg.chat_id,
            text=f"‚ö†Ô∏è {msg.from_user.first_name}, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {KANAL_USERNAME}!",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return

    text = msg.text or msg.caption or ""
    entities = msg.entities or msg.caption_entities or []

    if getattr(msg, "via_bot", None):
        try:
            await msg.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=msg.chat_id,
            text="‚ö†Ô∏è –†–µ–∫–ª–∞–º–∞ —á–µ—Ä–µ–∑ inline-–±–æ—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!",
            reply_markup=add_to_group_kb(context.bot.username)
        )
        return

    if has_suspicious_buttons(msg):
        try:
            await msg.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=msg.chat_id,
            text="‚ö†Ô∏è –†–µ–∫–ª–∞–º–∞ —Å –∏–≥—Ä–æ–≤—ã–º–∏/–≤–µ–±-app –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!",
            reply_markup=add_to_group_kb(context.bot.username)
        )
        return

    low = text.lower()
    if any(k in low for k in SUSPECT_KEYWORDS):
        try:
            await msg.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=msg.chat_id,
            text="‚ö†Ô∏è –ò–≥—Ä–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!",
            reply_markup=add_to_group_kb(context.bot.username)
        )
        return

    if getattr(msg.from_user, "is_bot", False):
        has_game = bool(getattr(msg, "game", None))
        has_url_entity = any(ent.type in ("text_link", "url", "mention") for ent in entities)
        has_url_text = any(x in low for x in ("t.me","telegram.me","http://","https://","www.","youtu.be","youtube.com"))
        if has_game or has_url_entity or has_url_text:
            try:
                await msg.delete()
            except:
                pass
            await context.bot.send_message(
                chat_id=msg.chat_id,
                text="‚ö†Ô∏è –†–µ–∫–ª–∞–º–∞/—Å—Å—ã–ª–∫–∏ –∏–ª–∏ game –æ—Ç –±–æ—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!",
                reply_markup=add_to_group_kb(context.bot.username)
            )
            return

    for ent in entities:
        if ent.type in ("text_link", "url", "mention"):
            url = getattr(ent, "url", "") or ""
            if url and ("t.me" in url or "telegram.me" in url or "http://" in url or "https://" in url):
                try:
                    await msg.delete()
                except:
                    pass
                await context.bot.send_message(
                    chat_id=msg.chat_id,
                    text=f"‚ö†Ô∏è {msg.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!",
                    reply_markup=add_to_group_kb(context.bot.username)
                )
                return

    if any(x in low for x in ("t.me","telegram.me","@","www.","https://youtu.be","http://","https://")):
        try:
            await msg.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=msg.chat_id,
            text=f"‚ö†Ô∏è {msg.from_user.first_name}, —Ä–µ–∫–ª–∞–º–∞/—Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!",
            reply_markup=add_to_group_kb(context.bot.username)
        )
        return

    sozlar = matndan_sozlar_olish(text)
    if any(s in UYATLI_SOZLAR for s in sozlar):
        try:
            await msg.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=msg.chat_id,
            text=f"‚ö†Ô∏è {msg.from_user.first_name}, –º–∞—Ç –≤ –≥—Ä—É–ø–ø–µ –∑–∞–ø—Ä–µ—â—ë–Ω!",
            reply_markup=add_to_group_kb(context.bot.username)
        )
        return

# –£—á—ë—Ç –¥–æ–±–∞–≤–∏–≤—à–∏—Ö –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def on_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    adder = msg.from_user
    members = msg.new_chat_members or []
    if not adder:
        return
    for m in members:
        if adder.id != m.id:
            FOYDALANUVCHI_HISOBI[adder.id] += 1
    try:
        await msg.delete()
    except:
        pass

# –§–∏–ª—å—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—á–∞ => –±–ª–æ–∫ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã
async def majbur_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if MAJBUR_LIMIT <= 0:
        return
    msg = update.effective_message
    if not msg or not msg.from_user:
        return
    if await is_privileged_message(msg, context.bot):
        return

    uid = msg.from_user.id
    now = datetime.now(timezone.utc)
    key = (msg.chat_id, uid)
    until_old = BLOK_VAQTLARI.get(key)
    if until_old and now < until_old:
        try:
            await msg.delete()
        except:
            pass
        return
    if uid in RUXSAT_USER_IDS:
        return

    cnt = FOYDALANUVCHI_HISOBI.get(uid, 0)
    if cnt >= MAJBUR_LIMIT:
        return

    try:
        await msg.delete()
    except:
        return

    until = datetime.now(timezone.utc) + timedelta(minutes=3)
    BLOK_VAQTLARI[(msg.chat_id, uid)] = until
    try:
        await context.bot.restrict_chat_member(
            chat_id=msg.chat_id,
            user_id=uid,
            permissions=BLOCK_PERMS,
            until_date=until
        )
    except Exception as e:
        log.warning(f"Restrict failed: {e}")

    qoldi = max(MAJBUR_LIMIT - cnt, 0)
    kb = [
        [InlineKeyboardButton("‚úÖ –Ø –¥–æ–±–∞–≤–∏–ª(–∞) –ª—é–¥–µ–π", callback_data=f"check_added:{uid}")],
        [InlineKeyboardButton("üéü –í—ã–¥–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é", callback_data=f"grant:{uid}")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=admin_add_link(context.bot.username))],
        [InlineKeyboardButton("‚è≥ –ë–ª–æ–∫ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã", callback_data="noop")]
    ]
    await context.bot.send_message(
        chat_id=msg.chat_id,
        text=f"‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ, –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å {MAJBUR_LIMIT} —á–µ–ª–æ–≤–µ–∫(–∞)! –û—Å—Ç–∞–ª–æ—Å—å: {qoldi}.",
        reply_markup=InlineKeyboardMarkup(kb)
    )

# ------------ Setup ------------
async def set_commands(app):
    await app.bot.set_my_commands(
        commands=[
            BotCommand("start", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
            BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
            BotCommand("id", "–í–∞—à ID"),
            BotCommand("count", "–°–∫–æ–ª—å–∫–æ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏"),
            BotCommand("top", "–¢–û–ü-100 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"),
            BotCommand("replycount", "(reply) —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
            BotCommand("forced", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (3‚Äì25)"),
            BotCommand("forcedoff", "–û—Ç–∫–ª—é—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"),
            BotCommand("cleangroup", "–°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –≤—Å–µ–º"),
            BotCommand("cleanuser", "(reply) —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
            BotCommand("permit", "(reply) –≤—ã–¥–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é"),
            BotCommand("channel", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"),
            BotCommand("channeloff", "–û—Ç–∫–ª—é—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"),
            BotCommand("night", "–í–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º"),
            BotCommand("nightoff", "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º"),
        ],
        scope=BotCommandScopeAllPrivateChats()
    )

def main():
    start_web()
    app = ApplicationBuilder().token(TOKEN).build()

    # Commands ‚Äî ONLY ENGLISH NAMES
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("id", id_berish))

    app.add_handler(CommandHandler("night", tun))
    app.add_handler(CommandHandler("nightoff", tunoff))

    app.add_handler(CommandHandler("permit", ruxsat))

    app.add_handler(CommandHandler("channel", kanal))
    app.add_handler(CommandHandler("channeloff", kanaloff))

    app.add_handler(CommandHandler("forced", majbur))
    app.add_handler(CommandHandler("forcedoff", majburoff))

    app.add_handler(CommandHandler("top", top_cmd))
    app.add_handler(CommandHandler("cleangroup", cleangroup))
    app.add_handler(CommandHandler("count", count_cmd))
    app.add_handler(CommandHandler("replycount", replycount))
    app.add_handler(CommandHandler("cleanuser", cleanuser))

    # Callbacks
    app.add_handler(CallbackQueryHandler(on_set_limit, pattern=r"^set_limit:"))
    app.add_handler(CallbackQueryHandler(kanal_callback, pattern=r"^kanal_azo$"))
    app.add_handler(CallbackQueryHandler(on_check_added, pattern=r"^check_added:"))
    app.add_handler(CallbackQueryHandler(on_grant_priv, pattern=r"^grant:"))

    # Filters (PTB v20+: use ATTACHMENT instead of DOCUMENT)
    media_filters = (
        filters.TEXT
        | filters.PHOTO
        | filters.VIDEO
        | filters.ANIMATION
        | filters.VOICE
        | filters.VIDEO_NOTE
        | filters.ATTACHMENT
    )
    app.add_handler(MessageHandler(media_filters & (~filters.COMMAND), reklama_va_soz_filtri))
    app.add_handler(ChatMemberHandler(on_new_members, ChatMemberHandler.CHAT_MEMBER))
    app.add_handler(MessageHandler(media_filters & (~filters.COMMAND), majbur_filter))

    # Set commands in PM
    app.post_init = lambda _: set_commands(app)

    log.info("‚úÖ Bot is starting...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
